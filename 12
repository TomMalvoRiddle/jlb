import java.util.Stack;

public class ConcurrentStack {

    private static final int NUM_THREADS = 2;
    private static final int NUM_OPERATIONS = 10;

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        Thread[] threads = new Thread[NUM_THREADS];
        for (int i = 0; i < NUM_THREADS; i++) {
            threads[i] = new Thread(new StackOperation(stack));
            threads[i].start();
        }
        for (int i = 0; i < NUM_THREADS; i++) {
            try {
                threads[i].join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println("Stack contents: " + stack);
    }

    static class StackOperation implements Runnable {
        private Stack<Integer> stack;

        public StackOperation(Stack<Integer> stack) {
            this.stack = stack;
        }

        @Override
        public void run() {
            for (int i = 0; i < NUM_OPERATIONS; i++) {
                synchronized (stack) {
                    if (i % 2 == 0) {
                        stack.push(i);
                        System.out.println(Thread.currentThread().getName() + " pushed " + i);
                    } else if (!stack.isEmpty()) {
                        int popped = stack.pop();
                        System.out.println(Thread.currentThread().getName() + " popped " + popped);
                    }
                }
            }
        }
    }
}
